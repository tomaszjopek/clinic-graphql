type Query {
    patients(page: Int, size: Int): PatientSearchResult!
    doctors(page: Int, size: Int): DoctorSearchResult!
}

type PageInfo {
    pageNumber: Int!
    totalCount: Int!
    totalPages: Int!
    hasNext: Boolean!
    hasPrev: Boolean!
    nextPage: Int
    prevPage: Int
}

interface Person {
    id: ID!
    name: String!
    surname: String!
    email: String!
}

type Patient implements Person {
    id: ID!
    name: String!
    surname: String!
    email: String!
}

type Doctor implements Person {
    id: ID!
    name: String!
    surname: String!
    email: String!
}

type PatientSearchResult {
    pageInfo: PageInfo!
    items: [Patient!]!
}

type DoctorSearchResult {
    pageInfo: PageInfo!
    items: [Doctor!]!
}

type Mutation {
    addDoctor(input: AddDoctorInput!): AddDoctorSuccessPayload!
}

input AddDoctorInput {
    name: String!
    surname: String!
    email: String!
}

type AddDoctorSuccessPayload {
    doctor: Doctor
}

type AddDoctorErrorPayload {
    error: String
}

union AddDoctorPayload = AddDoctorSuccessPayload | AddDoctorErrorPayload